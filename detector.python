#!/usr/bin/env python

# Copyright 2016 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse


# [START vision_text_detection]
def detect_text(path):
    """Detects text in the file."""
    from google.cloud import vision
    import io
    client = vision.ImageAnnotatorClient()

    # [START vision_python_migration_text_detection]
    with io.open(path, 'rb') as image_file:
        content = image_file.read()

    image = vision.Image(content=content)

    response = client.text_detection(image=image)
    texts = response.text_annotations
    print('Texts:')

    for text in texts:
        print('\n"{}"'.format(text.description))

        vertices = (['({},{})'.format(vertex.x, vertex.y)
                    for vertex in text.bounding_poly.vertices])

        print('bounds: {}'.format(','.join(vertices)))

    if response.error.message:
        raise Exception(
            '{}\nFor more info on error messages, check: '
            'https://cloud.google.com/apis/design/errors'.format(
                response.error.message))
    # [END vision_python_migration_text_detection]
# [END vision_text_detection]

def detect_text_uri(uri):
    print(uri)
    """Detects text in the file located in Google Cloud Storage or on the Web.
    """
    from google.cloud import vision
    client = vision.ImageAnnotatorClient()
    image = vision.Image()
    image.source.image_uri = uri

    response = client.text_detection(image=image)
    texts = response.text_annotations
    print('Texts:')

    for text in texts:
        print(f'\n"{text.description}"')

        if text.description.isdigit() and len(text.description) >= 6:
            print('isDigit {}'.format(text.description))
            return text.description

        #vertices = ([f'({vertex.x},{vertex.y})'
                     #for vertex in text.bounding_poly.vertices])

        #print('bounds: {}'.format(','.join(vertices)))

    if response.error.message:
        raise Exception(
            '{}\nFor more info on error messages, check: '
            'https://cloud.google.com/apis/design/errors'.format(
                response.error.message))
# [END vision_text_detection_gcs]

def run_quickstart():
    # [START vision_quickstart]
    import io
    import os

    # Imports the Google Cloud client library
    # [START vision_python_migration_import]
    from google.cloud import vision
    # [END vision_python_migration_import]

    # Instantiates a client
    # [START vision_python_migration_client]
    client = vision.ImageAnnotatorClient()
    # [END vision_python_migration_client]

    # The name of the image file to annotate
    file_name = os.path.abspath('resources/day.HEIC')

    # Loads the image into memory
    with io.open(file_name, 'rb') as image_file:
        content = image_file.read()

    image = vision.Image(content=content)

    # Performs label detection on the image file
    response = client.label_detection(image=image)
    labels = response.label_annotations

    print('Labels:')
    for label in labels:
        print(label.description)
    # [END vision_quickstart]


def publishResult(fotoId, fotoIndex):
    import pika, sys, os
    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
    channel = connection.channel()
    channel.exchange_declare(exchange='topic.fotos', exchange_type='topic', durable=True)
    message = "{"+"\"id\":\"{}\", \"index\": {}".format(fotoId, fotoIndex) + "}"
    channel.basic_publish(exchange='topic.fotos', routing_key='route_out', body=message)
    connection.close()

def consumeQueue():
    import pika, sys, os
    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
    channel = connection.channel()
    channel.exchange_declare(exchange='topic.fotos', exchange_type='topic', durable=True)
    result = channel.queue_declare(queue='cygnus', exclusive=True, durable=True)
    queue_name = result.method.queue
    channel.queue_bind(
        exchange='topic.fotos', queue=queue_name, routing_key='route_in')
    print(' [*] Waiting for image to process. To exit press CTRL+C')

    def onMessageCallback(ch, method, properties, body):
        fotoId = body.decode().replace('"','')
        #url = < SERVER_API > + '/fotos/' + fotoId
        url = "https://b9a1-91-86-222-236.ngrok-free.app/fotos/{}".format(fotoId)
        fotoIndex = detect_text_uri(url)
        print(" [x] %r:%r:%r" % (method.routing_key, fotoId, fotoIndex))
        publishResult(fotoId, fotoIndex)

    channel.basic_consume(
        queue=queue_name, on_message_callback=onMessageCallback, auto_ack=True)
    channel.start_consuming()


if __name__ == '__main__':
    try:
        consumeQueue()
        #publishResult(1, 10000)
    except KeyboardInterrupt:
        print('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)

    # run_quickstart()
